#夏小甜Nonebot开发SDK
#2020 XiaSweet Lab
#为了精简的代码和良好的适配性，强烈建议在开发测试完成后删除所有注释行与多余的空格哦

#加载基础组件
from nonebot import on_command, CommandSession
from nonebot import on_natural_language, NLPSession, IntentCommand
#日志记录模块
import logging
from nonebot.log import logger
#加载二级模块
import subprocess
#加载配置变量
from nonebot import get_bot
#配置变量示例
#TXCHAT_NOANSWER = get_bot().config.TXCHAT_NOANSWER

# on_command 装饰器将函数声明为一个Nonebot的命令处理器
# 这里 nextchest 为命令的名字（可为不冲突的任意值），同时允许使用别名「宝箱查询」
@on_command('nextchest', aliases=('宝箱查询'),only_to_me=False)
async def nextchest(session: CommandSession):
    # 从会话状态（session.state）中获取游戏Tag（tag），如果当前不存在，则询问用户
    tag = session.get('tag', prompt='请回复您的游戏TAG哦。',at_sender=True,only_to_me=True)
    # 向脚本发送API请求
    nextchest_report = await get_nextchest_of_tag(tag)
    # 向用户发送宝箱信息
    await session.send(nextchest_report,at_sender=True)
    logger.info('[宝箱查询]结果已反馈用户,任务结束')
async def get_nextchest_of_tag(tag: str) -> str:
    # subprocess.getoutput是用于执行脚本并输出结果的
    users = subprocess.getoutput("python3 lib/clashroyale/chests.py -u '%s'"%(tag))
    if users == 'ERROR-CR404':
        logger.info('[宝箱查询]查询完毕，官方无此TAG信息')
        logger.debug('[宝箱查询]查询脚本执行完毕并返回信息到Nonebot脚本')
        return f'出现意外了：\n你想查询的用户被抓到二次元了，请检查一下再重新发送指令查询吧(⊙﹏⊙)'
    
    elif users == 'ERROR-CR400':
        logger.info('[宝箱查询]出现错误了:官方API查询400,提示详见Debug模式')
        logger.info('[宝箱查询]你可以前往CR开发者网站查询详情')
        logger.debug('[宝箱查询]详细信息:没有使用正确的查询地址或官方关闭API了，或许也倒闭了吧( •̀ ω •́ )')
        logger.debug('[宝箱查询]查询脚本执行完毕并返回信息到Nonebot脚本')
        return f'QAQ小管家迷路了，请联系管理员协助修复吧'
        
    else:
        return f'{users}'
# nextchest.args_parser 装饰器将函数声明为 nextchest 命令的参数解析器
# 命令解析器用于将用户输入的参数解析成命令真正需要的数据
@nextchest.args_parser
async def _(session: CommandSession):
    logger.debug('[宝箱查询]开始过滤无效字符')
    # 去掉消息的空白符和混淆注释号’#’
    stripped_arg = session.current_arg_text.replace(' ','')
    stripped_arg = session.current_arg_text.replace('#','')
    if session.is_first_run:
        logger.info('[宝箱查询]第一次进入程序，开始分析')
        # 该命令第一次运行（第一次进入命令会话）
        if stripped_arg:
            # 第一次运行参数不为空，意味着用户直接将游戏Tag跟在命令名后面，作为参数传入
            # 例如用户可能发送了：宝箱查询 '查询Tag'
            session.state['tag'] = stripped_arg
            logger.info('[宝箱查询]用户第一次输入不为空，作为参数传入并执行查询脚本')
        return
    if not stripped_arg:
        # 用户没有发送有效的名称（而是发送了空白字符），则提示重新输入
        # 这里 session.pause() 将会发送消息并暂停当前会话（该行后面的代码不会被运行）
        logger.info('[宝箱查询]用户没有输入正确的TAG，重新询问')
        session.pause('您的TAG似乎不对，再试试吧',at_sender=True)
        handle_cancellation(session)
    # 如果当前正在向用户询问更多信息（例如本例中的要查询的TAG），且用户输入有效，则放入会话状态
    logger.info('[宝箱查询]收到了非空白的用户TAG，转接查询实用程序')
    session.state[session.current_key] = stripped_arg
# on_natural_language 装饰器将函数声明为一个自然语言处理器
# keywords 表示需要响应的关键词，类型为任意可迭代对象，元素类型为 str
# 如果不传入 keywords，则响应所有没有被当作命令处理的消息
@on_natural_language(keywords={'查宝箱','下一个宝箱','箱子'},only_to_me=True)
async def _(session: NLPSession):
    # 返回意图命令，前两个参数必填，分别表示置信度和意图命令名
    return IntentCommand(87.0, 'nextchest')